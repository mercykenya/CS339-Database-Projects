package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate Predicate;
    private OpIterator child1_;
    private OpIterator child2_;
    private Tuple currTuple;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // DONE
        this.Predicate = p;
        this.child1_ = child1;
        this.child2_ = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // DONE
        return Predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // DONE
        return child1_.getTupleDesc().getFieldName(Predicate.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // DONE
        return child2_.getTupleDesc().getFieldName(Predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // DONE
        return TupleDesc.merge(child1_.getTupleDesc(), child2_.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // DONE
        super.open();
        child1_.open();
        child2_.open();

    }

    public void close() {
        // DONE
        super.close();
        child1_.close();
        child2_.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // DONE
        child1_.rewind();
        child2_.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // DONE

        while (child1_.hasNext() || currTuple!=null) {
            // If we have not yet processed any tuples from child1_, get the next tuple
            if (currTuple == null) {
                currTuple = child1_.next();
            }

            // Get the next tuple from child2_ and check if it satisfies the join predicate
            while (child2_.hasNext()){
                Tuple cTuple=child2_.next();
                if (Predicate.filter(currTuple, cTuple)){
                    Tuple t= new Tuple(getTupleDesc());
                    int t1Fields = currTuple.getTupleDesc().numFields();
                    int t2Fields = cTuple.getTupleDesc().numFields();

                    // Add the fields from the first tuple
                    for (int i = 0; i < t1Fields; ++i)
                        t.setField(i, currTuple.getField(i));

                    // Add the fields from the second tuple
                    for (int i = 0; i < t2Fields; ++i)
                        t.setField(i + t1Fields, cTuple.getField(i));
                    return t;
                }
            }

            // If there are no more tuples in child2_, move on to the next tuple in child1_
            child2_.rewind();
            currTuple=null;
        }
         // If we have already finished iterating over all tuples, return null
        return null;
    }



    @Override
    public OpIterator[] getChildren() {
        // DONE
        return new OpIterator[] {child1_, child2_};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // DONE
        this.child1_ = children[0];
        this.child2_ = children[1];
    }

}
